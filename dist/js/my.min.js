var o="object"==typeof o?o:{};(o={init:function(){mapboxgl.accessToken="pk.eyJ1IjoidGhhdGJyYW0iLCJhIjoiY2p0YzM1NW9zMHM5MTN5cDRsdnJoOGw3byJ9.A7umZVt9Sx7Nb8jfN6M03g";let e=$.urlParam("mydocid");if(console.log("mydoc_id_queryStr_val: "+e),!1===e){o.loadMap().on("load",(function(){$("#mydoc_map_status").hide(),$("#mydoc_map .alert").is(":visible")&&$("#mydoc_map .alert").removeAttr("style")}))}else $("#mydoc_id_search_field").val(e),$("#mydoc_id_search_go").prop("disabled",!0),o.findMyDoC("url");$("#mydoc_id_search_field").on("input",(function(){let e=$(this).val();e=$.trim(e),e.length>4?($("#mydoc_id_search_go").prop("disabled",!1),$("#mydoc_id_search_field").off("keypress"),$("#mydoc_id_search_field").keypress((function(e){13===e.which&&o.findMyDoC("user")}))):($("#mydoc_id_search_go").prop("disabled",!0),$("#mydoc_id_search_field").off("keypress"))})),$("#mydoc_id_search_go").click((function(){o.findMyDoC("user")}))},loadMap:function(o){$("#mydoc_map_status").show();var e=[-105.547222,39],t=6.5;return void 0!==o&&(void 0!==o.center&&(e=o.center),void 0!==o.zoom&&(t=o.zoom)),new mapboxgl.Map({container:"mydoc_map",style:"mapbox://styles/thatbram/cjtokh26902ad1fm43xqm4kv2",center:e,zoom:t})},findMyDoC:function(e){let t;switch($("#mydoc_map .alert").alert("close"),e){case"user":console.log("source: user"),-1!==location.href.indexOf("?")&&history.pushState("",document.title,window.location.pathname),t=$("#mydoc_id_search_field").val(),t=$.trim(t);break;case"url":console.log("source: url");let o=$.urlParam("mydocid");t=o}t=t.toLowerCase(),$.ajax({url:"/.netlify/functions/mydoc_at?mydocid="+t,dataType:"json"}).done((function(e){if(console.log("resp: "),console.log(e),e.length>0){let r=t;var a=e[0].fields;if(console.log(a),history.pushState("",document.title,"?mydocid="+r),a.videos){var i=a.videos;i=i.split(","),$.each(i,(function(o,e){let t=e.substr(0,e.indexOf(":"));var a,i=e.substr(e.indexOf(":")+1,e.length);if("vimeo"===t)a='<iframe src="https://player.vimeo.com/video/'+i+'" class="video" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe>';$("#mydoc_details_videos_container").append(a)}))}else $("#mydoc_details_videos_container").html("");if(a.photos){var s=a.photos;s=s.split(","),$("#mydoc_details_photos_carousel").css("visibility","visible")}else $("#mydoc_details_photos_carousel").css("visibility","hidden");if(a.collection_date)a.collection_date;if(a.latitude)var l=a.latitude;if(a.longitude)var d=a.longitude;if(!a.latitude||!a.longitude)return void c("missingCoors");let n=[d,l],m={center:n,zoom:15},p=o.loadMap(m);p.on("load",(function(){$("#mydoc_map_status").hide(),$("#mydoc_map .alert").is(":visible")&&$("#mydoc_map .alert").removeAttr("style");(new mapboxgl.Marker).setLngLat(n).addTo(p);var o={top:[0,0],"top-left":[0,0],"top-right":[0,0],bottom:[0,-38],"bottom-left":[10,-40],"bottom-right":[-10,-40],left:[8,-30],right:[-8,-30]};mydoc_map_popup_template='<span class="mydoc_id">'+r+"</span><br>"+(l+", "+d),mydoc_map_popup=new mapboxgl.Popup({offset:o,className:"mydoc-map-popup"}).setLngLat([d,l]).setHTML(mydoc_map_popup_template).addTo(p)}))}else c("invalidMydoc");function c(e){var t;switch(e){case"invalidMydoc":t="<strong>DoC id not found.</strong> Please try again.";break;case"missingCoors":t="<strong>Can't map this Dose ID.</strong> Seems to be from lack of coordinates. Sorry about that... =/";break;default:t="<strong>Can't map this Dose ID.</strong> Looks like that's all the info there is. Sorry about that... =/"}if(o.loadMap().on("load",(function(){console.log("findMyDoC mydoc_map.on(load) - invalid id"),$("#mydoc_map_status").hide(),$("#mydoc_map .alert").is(":visible")&&$("#mydoc_map .alert").removeAttr("style")})),$("#mydoc_map").append('<div class="alert alert-danger alert-dismissible fade show" role="alert">'+t+'<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button></div>'),console.log("$(#mydoc_map_status).is(:visible): "+$("#mydoc_map_status").is(":visible")),$("#mydoc_map_status").is(":visible")){let o=$("#mydoc_map_status").outerHeight();$("#mydoc_map .alert:first").css("margin-top",o+16+"px")}}}))}}).init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
